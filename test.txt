{
  "name": "Mateusz",
  "second_name": "Jan",
  "surname": "Kowalski",
  "FK_iduser_type": 2,
  "email": "mateusz.kowalski@example.com",
  "phonenumber": "123456789",
  "zipcode": "20-001",
  "street": "Lubelska 10",
  "FK_idcity": 1,
  "password": "securePassword123"
}

export const UsersUpdate = async (req = request, res = response) => {
  try {
    const { email, password, name, surname } = req.body;
    const { id, FK_iduser_type, FK_idcity } = req.params;  // Zakładam, że te parametry są przekazywane w URL

    // Sprawdzenie, czy użytkownik istnieje
    const checkUniqueId = await UsersModels.findUnique({
      where: {
        iduser_FK_iduser_type_FK_idcity: {
          iduser: parseInt(id),
          FK_iduser_type: parseInt(FK_iduser_type),
          FK_idcity: parseInt(FK_idcity),
        },
      },
    });

    if (!checkUniqueId) {
      return res.status(404).json({
        success: false,
        message: 'User ID not found!',
      });
    }

    // Sprawdzenie, czy email jest unikalny
    const checkUniqueEmail = await UsersModels.findFirst({
      where: {
        email,
      },
    });

    if (checkUniqueEmail && checkUniqueEmail.iduser !== parseInt(id)) {
      return res.status(400).json({
        success: false,
        message: 'Email already exists!',
      });
    }

    // Aktualizacja użytkownika
    const result = await UsersModels.update({
      where: {
        iduser_FK_iduser_type_FK_idcity: {
          iduser: parseInt(id),
          FK_iduser_type: parseInt(FK_iduser_type),
          FK_idcity: parseInt(FK_idcity),
        },
      },
      data: {
        email,
        password: bcryptjs.hashSync(password, salt), // Hashowanie hasła
        name,
        surname,
      },
    });

    res.status(200).json({
      success: true,
      message: "Successfully updated user!",
      user: result,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message,
    });
  }
};
